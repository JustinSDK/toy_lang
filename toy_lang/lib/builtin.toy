exports = ['Exception', 'println', 'iterate', 'range', 'isInstance']

class Exception(Traceable) {
    def init() {
        this.super(Traceable, 'init', arguments)
    }
}

def println(message) {
    if hasValue(message) {
        print(message)
    }
    print('\n')
}

def stopLambda(stop, step) {
    if typeof(stop) == 'number' {
        if noValue(step) or ((typeof(step) == 'number') and step > 0) {
            return i -> i < stop
        }
        else {
            return i -> i > stop 
        }
    }
    return stop
}

def stepLambda(step) {
    if noValue(step) {
        return i -> i + 1
    }

    if typeof(step) == 'number' {
        return i -> i + step
    }
    return step
}

def iterate(start, stop, step) {
    n = start
    p = stopLambda(stop, step)
    s = stepLambda(step)

    class Iter {
        def hasNext() {
            return p(n)
        }

        def next() {
            v = n
            nonlocal n = s(n)
            return v
        }

        def forEach(action) {
            while this.hasNext() {
                action(this.next())
            }
        }          

        def select(predicate) {
            lt = []
            while this.hasNext() {
                nx = this.next()
                if predicate(nx) {
                    lt.add(nx)
                }
            }
            return lt
        }  
    }

    return new Iter()
}

def range(start, stop, step) {
    lt = []
    iterate(start, stop, step).forEach(n -> lt.add(n))
    return lt
}

def isSubType(clz, parentClz) {
    if clz == Object {
        return false
    }

    parentClzs = clz.parents()
    if parentClzs.any(c -> c == parentClz) {
        return true
    }

    return parentClzs.any(c -> isSubType(c, parentClz))
}

def isInstance(obj, type) {
    if hasValue(obj) {
        clz = obj.class()
        return (clz == type) or isSubType(clz, type)
    }
    return false
}

