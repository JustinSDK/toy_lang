exports = ['Exception', 'println', 'iterate', 'range', 'isInstance']

class Exception(Traceable) {
    def init() {
        this.super(Traceable, 'init', arguments)
    }
}

def println(message) {
    if hasValue(message) {
        print(message)
    }
    print('\n')
}

def iterate(start, stop, step) {
    s = step if hasValue(step) else 1
    n = start

    class Iter {
        def hasNext() {
            return n + s <= stop
        }

        def next() {
            v = n
            nonlocal n += s
            return v
        }

        def forEach(action) {
            while this.hasNext() {
                action(this.next())
            }
        }
    }

    return new Iter()
}

def range(start, stop, step) {
    lt = []
    iterate(start, stop, step).forEach(n -> lt.add(n))
    return lt
}

def isSubType(clz, parentClz) {
    if clz == Object {
        return false
    }

    parentClzs = clz.parents()
    if parentClzs.any(c -> c == parentClz) {
        return true
    }

    return parentClzs.any(c -> isSubType(c, parentClz))
}

def isInstance(obj, type) {
    clz = obj.class()
    return (clz == type) or isSubType(clz, type)
}

