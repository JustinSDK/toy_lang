exports = ['Exception', 'println', 'range', 'isInstance']

class Exception(Traceable) {
    def init() {
        this.super(Traceable, 'init', arguments)
    }
}

def println(message) {
    if hasValue(message) {
        print(message)
    }
    print('\n')
}

def range(start, stop, step) {
    s = step if hasValue(step) else 1
    len = Number.parseInt((stop - start) / s)

    lt = []
    i = 0
    while i < len {
        lt.add(i * s + start)
        i += 1
    }
    return lt
}

def isSubType(clz, parentClz) {
    if clz == Object {
        return false
    }

    parentClzs = clz.parents()
    if parentClzs.any(c -> c == parentClz) {
        return true
    }

    return parentClzs.any(c -> isSubType(c, parentClz))
}

def isInstance(obj, type) {
    clz = obj.class()
    return (clz == type) or isSubType(clz, type)
}

