exports = ['min', 'max', 'abs', 'sum', 'Random', 'random', 'pow']

def min(numbers) {
    return numsOrArgs(numbers, arguments).sort().get(0)
}

def max(numbers) {
    return numsOrArgs(numbers, arguments).sort((n1, n2) -> n2 - n1).get(0)
}

def abs(n) {
    return -n if n < 0 else n
}

def sum(numbers) {
    return numsOrArgs(numbers, arguments).reduce((acc, n) -> acc + n, 0)
}

def numsOrArgs(nums, args) {
    return nums if isInstance(nums, List) else args 
}

modulus = 2147483647     # m
multiplier = 1103515245  # a
increment = 12345        # c

class Random {
    def init(seed) {
        this.seed = seed if hasValue(seed) else (3447679086515839964 * currentTimeMillis())
    }
    
    def nextInt(n) {
        this.seed = (multiplier * this.seed + increment) % modulus
        if hasValue(n) {
            return Number.parseInt((this.seed / modulus) * n)
        }
        return this.seed
    }
}

def random() {
    return ((new Random()).nextInt()) / modulus
}

def nthRoot(n, nth) {
    eps = 0.0001
    df = 2147483647

    preX = ((new Random()).nextInt(101) + 1) % 10
    x = 0.0  
    while df > eps {
        x = ((nth - 1.0) * preX + n / pow(preX, nth - 1)) / nth
        df = abs(x - preX)
        preX = x;
    }
         
    return x if Number.isFinite(x) else nthRoot(n, nth)
}

def pow(base, exponent) {
    if exponent == 0 {
        return 1
    }

    if exponent < 1 {
        return nthRoot(base, 1 / exponent)
    }

    halfP = pow(base, Number.parseInt(exponent / 2))
    return (halfP * halfP) if (Number.parseInt(exponent % 2) == 0) else (base * halfP * halfP)
}